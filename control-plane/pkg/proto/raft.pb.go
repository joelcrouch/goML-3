// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.20.3
// source: raft.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskStatus int32

const (
	TaskStatus_PENDING   TaskStatus = 0
	TaskStatus_ASSIGNED  TaskStatus = 1
	TaskStatus_RUNNING   TaskStatus = 2
	TaskStatus_COMPLETED TaskStatus = 3
	TaskStatus_FAILED    TaskStatus = 4
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "PENDING",
		1: "ASSIGNED",
		2: "RUNNING",
		3: "COMPLETED",
		4: "FAILED",
	}
	TaskStatus_value = map[string]int32{
		"PENDING":   0,
		"ASSIGNED":  1,
		"RUNNING":   2,
		"COMPLETED": 3,
		"FAILED":    4,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_raft_proto_enumTypes[0].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_raft_proto_enumTypes[0]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{0}
}

type NodeStatus int32

const (
	NodeStatus_HEALTHY   NodeStatus = 0
	NodeStatus_UNHEALTHY NodeStatus = 1
	NodeStatus_UNKNOWN   NodeStatus = 2
)

// Enum value maps for NodeStatus.
var (
	NodeStatus_name = map[int32]string{
		0: "HEALTHY",
		1: "UNHEALTHY",
		2: "UNKNOWN",
	}
	NodeStatus_value = map[string]int32{
		"HEALTHY":   0,
		"UNHEALTHY": 1,
		"UNKNOWN":   2,
	}
)

func (x NodeStatus) Enum() *NodeStatus {
	p := new(NodeStatus)
	*p = x
	return p
}

func (x NodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_raft_proto_enumTypes[1].Descriptor()
}

func (NodeStatus) Type() protoreflect.EnumType {
	return &file_raft_proto_enumTypes[1]
}

func (x NodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeStatus.Descriptor instead.
func (NodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{1}
}

// Task represents a computational task in the system
type Task struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TaskId         string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskType       string                 `protobuf:"bytes,2,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"` // "matmul", "ingestion", "processing", etc.
	Status         TaskStatus             `protobuf:"varint,3,opt,name=status,proto3,enum=raftpb.TaskStatus" json:"status,omitempty"`
	AssignedNodeId string                 `protobuf:"bytes,4,opt,name=assigned_node_id,json=assignedNodeId,proto3" json:"assigned_node_id,omitempty"`
	TaskData       []byte                 `protobuf:"bytes,5,opt,name=task_data,json=taskData,proto3" json:"task_data,omitempty"` // JSON-encoded task parameters
	CreatedAt      int64                  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	StartedAt      int64                  `protobuf:"varint,7,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	CompletedAt    int64                  `protobuf:"varint,8,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	ResultData     string                 `protobuf:"bytes,9,opt,name=result_data,json=resultData,proto3" json:"result_data,omitempty"` // JSON-encoded results
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_raft_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Task) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *Task) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_PENDING
}

func (x *Task) GetAssignedNodeId() string {
	if x != nil {
		return x.AssignedNodeId
	}
	return ""
}

func (x *Task) GetTaskData() []byte {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *Task) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Task) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *Task) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *Task) GetResultData() string {
	if x != nil {
		return x.ResultData
	}
	return ""
}

// Node represents a worker node in the cluster
type Node struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	CloudProvider string                 `protobuf:"bytes,3,opt,name=cloud_provider,json=cloudProvider,proto3" json:"cloud_provider,omitempty"`
	Region        string                 `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	Status        NodeStatus             `protobuf:"varint,5,opt,name=status,proto3,enum=raftpb.NodeStatus" json:"status,omitempty"`
	LastHeartbeat int64                  `protobuf:"varint,6,opt,name=last_heartbeat,json=lastHeartbeat,proto3" json:"last_heartbeat,omitempty"`
	CpuUsage      float64                `protobuf:"fixed64,7,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	MemoryUsage   float64                `protobuf:"fixed64,8,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	ActiveTasks   int32                  `protobuf:"varint,9,opt,name=active_tasks,json=activeTasks,proto3" json:"active_tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_raft_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{1}
}

func (x *Node) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Node) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Node) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *Node) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Node) GetStatus() NodeStatus {
	if x != nil {
		return x.Status
	}
	return NodeStatus_HEALTHY
}

func (x *Node) GetLastHeartbeat() int64 {
	if x != nil {
		return x.LastHeartbeat
	}
	return 0
}

func (x *Node) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *Node) GetMemoryUsage() float64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *Node) GetActiveTasks() int32 {
	if x != nil {
		return x.ActiveTasks
	}
	return 0
}

type SubmitTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskType      string                 `protobuf:"bytes,1,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	TaskData      []byte                 `protobuf:"bytes,2,opt,name=task_data,json=taskData,proto3" json:"task_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitTaskRequest) Reset() {
	*x = SubmitTaskRequest{}
	mi := &file_raft_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTaskRequest) ProtoMessage() {}

func (x *SubmitTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTaskRequest.ProtoReflect.Descriptor instead.
func (*SubmitTaskRequest) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{2}
}

func (x *SubmitTaskRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *SubmitTaskRequest) GetTaskData() []byte {
	if x != nil {
		return x.TaskData
	}
	return nil
}

type SubmitTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitTaskResponse) Reset() {
	*x = SubmitTaskResponse{}
	mi := &file_raft_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTaskResponse) ProtoMessage() {}

func (x *SubmitTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTaskResponse.ProtoReflect.Descriptor instead.
func (*SubmitTaskResponse) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SubmitTaskResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SubmitTaskResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type GetTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	mi := &file_raft_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{4}
}

func (x *GetTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Found         bool                   `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskResponse) Reset() {
	*x = GetTaskResponse{}
	mi := &file_raft_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResponse) ProtoMessage() {}

func (x *GetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResponse.ProtoReflect.Descriptor instead.
func (*GetTaskResponse) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{5}
}

func (x *GetTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *GetTaskResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

type ListTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusFilter  TaskStatus             `protobuf:"varint,1,opt,name=status_filter,json=statusFilter,proto3,enum=raftpb.TaskStatus" json:"status_filter,omitempty"` // Optional filter
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	mi := &file_raft_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{6}
}

func (x *ListTasksRequest) GetStatusFilter() TaskStatus {
	if x != nil {
		return x.StatusFilter
	}
	return TaskStatus_PENDING
}

func (x *ListTasksRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*Task                `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksResponse) Reset() {
	*x = ListTasksResponse{}
	mi := &file_raft_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResponse) ProtoMessage() {}

func (x *ListTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResponse.ProtoReflect.Descriptor instead.
func (*ListTasksResponse) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{7}
}

func (x *ListTasksResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type HeartbeatRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	CpuUsage      float64                `protobuf:"fixed64,2,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	MemoryUsage   float64                `protobuf:"fixed64,3,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	ActiveTasks   int32                  `protobuf:"varint,4,opt,name=active_tasks,json=activeTasks,proto3" json:"active_tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	mi := &file_raft_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{8}
}

func (x *HeartbeatRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *HeartbeatRequest) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *HeartbeatRequest) GetMemoryUsage() float64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *HeartbeatRequest) GetActiveTasks() int32 {
	if x != nil {
		return x.ActiveTasks
	}
	return 0
}

type HeartbeatResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Acknowledged  bool                   `protobuf:"varint,1,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
	LeaderAddress string                 `protobuf:"bytes,2,opt,name=leader_address,json=leaderAddress,proto3" json:"leader_address,omitempty"` // Redirect to leader if not leader
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	mi := &file_raft_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{9}
}

func (x *HeartbeatResponse) GetAcknowledged() bool {
	if x != nil {
		return x.Acknowledged
	}
	return false
}

func (x *HeartbeatResponse) GetLeaderAddress() string {
	if x != nil {
		return x.LeaderAddress
	}
	return ""
}

type PollTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollTaskRequest) Reset() {
	*x = PollTaskRequest{}
	mi := &file_raft_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollTaskRequest) ProtoMessage() {}

func (x *PollTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollTaskRequest.ProtoReflect.Descriptor instead.
func (*PollTaskRequest) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{10}
}

func (x *PollTaskRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type PollTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	HasTask       bool                   `protobuf:"varint,2,opt,name=has_task,json=hasTask,proto3" json:"has_task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollTaskResponse) Reset() {
	*x = PollTaskResponse{}
	mi := &file_raft_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollTaskResponse) ProtoMessage() {}

func (x *PollTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollTaskResponse.ProtoReflect.Descriptor instead.
func (*PollTaskResponse) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{11}
}

func (x *PollTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *PollTaskResponse) GetHasTask() bool {
	if x != nil {
		return x.HasTask
	}
	return false
}

type ReportTaskResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	FinalStatus   TaskStatus             `protobuf:"varint,2,opt,name=final_status,json=finalStatus,proto3,enum=raftpb.TaskStatus" json:"final_status,omitempty"`
	ResultData    string                 `protobuf:"bytes,3,opt,name=result_data,json=resultData,proto3" json:"result_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportTaskResultRequest) Reset() {
	*x = ReportTaskResultRequest{}
	mi := &file_raft_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportTaskResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTaskResultRequest) ProtoMessage() {}

func (x *ReportTaskResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTaskResultRequest.ProtoReflect.Descriptor instead.
func (*ReportTaskResultRequest) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{12}
}

func (x *ReportTaskResultRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ReportTaskResultRequest) GetFinalStatus() TaskStatus {
	if x != nil {
		return x.FinalStatus
	}
	return TaskStatus_PENDING
}

func (x *ReportTaskResultRequest) GetResultData() string {
	if x != nil {
		return x.ResultData
	}
	return ""
}

type ReportTaskResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Acknowledged  bool                   `protobuf:"varint,1,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportTaskResultResponse) Reset() {
	*x = ReportTaskResultResponse{}
	mi := &file_raft_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportTaskResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTaskResultResponse) ProtoMessage() {}

func (x *ReportTaskResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTaskResultResponse.ProtoReflect.Descriptor instead.
func (*ReportTaskResultResponse) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{13}
}

func (x *ReportTaskResultResponse) GetAcknowledged() bool {
	if x != nil {
		return x.Acknowledged
	}
	return false
}

var File_raft_proto protoreflect.FileDescriptor

const file_raft_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"raft.proto\x12\x06raftpb\"\xb1\x02\n" +
	"\x04Task\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1b\n" +
	"\ttask_type\x18\x02 \x01(\tR\btaskType\x12*\n" +
	"\x06status\x18\x03 \x01(\x0e2\x12.raftpb.TaskStatusR\x06status\x12(\n" +
	"\x10assigned_node_id\x18\x04 \x01(\tR\x0eassignedNodeId\x12\x1b\n" +
	"\ttask_data\x18\x05 \x01(\fR\btaskData\x12\x1d\n" +
	"\n" +
	"created_at\x18\x06 \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"started_at\x18\a \x01(\x03R\tstartedAt\x12!\n" +
	"\fcompleted_at\x18\b \x01(\x03R\vcompletedAt\x12\x1f\n" +
	"\vresult_data\x18\t \x01(\tR\n" +
	"resultData\"\xae\x02\n" +
	"\x04Node\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12%\n" +
	"\x0ecloud_provider\x18\x03 \x01(\tR\rcloudProvider\x12\x16\n" +
	"\x06region\x18\x04 \x01(\tR\x06region\x12*\n" +
	"\x06status\x18\x05 \x01(\x0e2\x12.raftpb.NodeStatusR\x06status\x12%\n" +
	"\x0elast_heartbeat\x18\x06 \x01(\x03R\rlastHeartbeat\x12\x1b\n" +
	"\tcpu_usage\x18\a \x01(\x01R\bcpuUsage\x12!\n" +
	"\fmemory_usage\x18\b \x01(\x01R\vmemoryUsage\x12!\n" +
	"\factive_tasks\x18\t \x01(\x05R\vactiveTasks\"M\n" +
	"\x11SubmitTaskRequest\x12\x1b\n" +
	"\ttask_type\x18\x01 \x01(\tR\btaskType\x12\x1b\n" +
	"\ttask_data\x18\x02 \x01(\fR\btaskData\"l\n" +
	"\x12SubmitTaskResponse\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\")\n" +
	"\x0eGetTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\"I\n" +
	"\x0fGetTaskResponse\x12 \n" +
	"\x04task\x18\x01 \x01(\v2\f.raftpb.TaskR\x04task\x12\x14\n" +
	"\x05found\x18\x02 \x01(\bR\x05found\"a\n" +
	"\x10ListTasksRequest\x127\n" +
	"\rstatus_filter\x18\x01 \x01(\x0e2\x12.raftpb.TaskStatusR\fstatusFilter\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\"7\n" +
	"\x11ListTasksResponse\x12\"\n" +
	"\x05tasks\x18\x01 \x03(\v2\f.raftpb.TaskR\x05tasks\"\x8e\x01\n" +
	"\x10HeartbeatRequest\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1b\n" +
	"\tcpu_usage\x18\x02 \x01(\x01R\bcpuUsage\x12!\n" +
	"\fmemory_usage\x18\x03 \x01(\x01R\vmemoryUsage\x12!\n" +
	"\factive_tasks\x18\x04 \x01(\x05R\vactiveTasks\"^\n" +
	"\x11HeartbeatResponse\x12\"\n" +
	"\facknowledged\x18\x01 \x01(\bR\facknowledged\x12%\n" +
	"\x0eleader_address\x18\x02 \x01(\tR\rleaderAddress\"*\n" +
	"\x0fPollTaskRequest\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\"O\n" +
	"\x10PollTaskResponse\x12 \n" +
	"\x04task\x18\x01 \x01(\v2\f.raftpb.TaskR\x04task\x12\x19\n" +
	"\bhas_task\x18\x02 \x01(\bR\ahasTask\"\x8a\x01\n" +
	"\x17ReportTaskResultRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x125\n" +
	"\ffinal_status\x18\x02 \x01(\x0e2\x12.raftpb.TaskStatusR\vfinalStatus\x12\x1f\n" +
	"\vresult_data\x18\x03 \x01(\tR\n" +
	"resultData\">\n" +
	"\x18ReportTaskResultResponse\x12\"\n" +
	"\facknowledged\x18\x01 \x01(\bR\facknowledged*O\n" +
	"\n" +
	"TaskStatus\x12\v\n" +
	"\aPENDING\x10\x00\x12\f\n" +
	"\bASSIGNED\x10\x01\x12\v\n" +
	"\aRUNNING\x10\x02\x12\r\n" +
	"\tCOMPLETED\x10\x03\x12\n" +
	"\n" +
	"\x06FAILED\x10\x04*5\n" +
	"\n" +
	"NodeStatus\x12\v\n" +
	"\aHEALTHY\x10\x00\x12\r\n" +
	"\tUNHEALTHY\x10\x01\x12\v\n" +
	"\aUNKNOWN\x10\x022\xd0\x01\n" +
	"\vTaskService\x12C\n" +
	"\n" +
	"SubmitTask\x12\x19.raftpb.SubmitTaskRequest\x1a\x1a.raftpb.SubmitTaskResponse\x12:\n" +
	"\aGetTask\x12\x16.raftpb.GetTaskRequest\x1a\x17.raftpb.GetTaskResponse\x12@\n" +
	"\tListTasks\x12\x18.raftpb.ListTasksRequest\x1a\x19.raftpb.ListTasksResponse2\xe5\x01\n" +
	"\vNodeService\x12@\n" +
	"\tHeartbeat\x12\x18.raftpb.HeartbeatRequest\x1a\x19.raftpb.HeartbeatResponse\x12=\n" +
	"\bPollTask\x12\x17.raftpb.PollTaskRequest\x1a\x18.raftpb.PollTaskResponse\x12U\n" +
	"\x10ReportTaskResult\x12\x1f.raftpb.ReportTaskResultRequest\x1a .raftpb.ReportTaskResultResponseB9Z7github.com/yourusername/ml-raft-control-plane/pkg/protob\x06proto3"

var (
	file_raft_proto_rawDescOnce sync.Once
	file_raft_proto_rawDescData []byte
)

func file_raft_proto_rawDescGZIP() []byte {
	file_raft_proto_rawDescOnce.Do(func() {
		file_raft_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_raft_proto_rawDesc), len(file_raft_proto_rawDesc)))
	})
	return file_raft_proto_rawDescData
}

var file_raft_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_raft_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_raft_proto_goTypes = []any{
	(TaskStatus)(0),                  // 0: raftpb.TaskStatus
	(NodeStatus)(0),                  // 1: raftpb.NodeStatus
	(*Task)(nil),                     // 2: raftpb.Task
	(*Node)(nil),                     // 3: raftpb.Node
	(*SubmitTaskRequest)(nil),        // 4: raftpb.SubmitTaskRequest
	(*SubmitTaskResponse)(nil),       // 5: raftpb.SubmitTaskResponse
	(*GetTaskRequest)(nil),           // 6: raftpb.GetTaskRequest
	(*GetTaskResponse)(nil),          // 7: raftpb.GetTaskResponse
	(*ListTasksRequest)(nil),         // 8: raftpb.ListTasksRequest
	(*ListTasksResponse)(nil),        // 9: raftpb.ListTasksResponse
	(*HeartbeatRequest)(nil),         // 10: raftpb.HeartbeatRequest
	(*HeartbeatResponse)(nil),        // 11: raftpb.HeartbeatResponse
	(*PollTaskRequest)(nil),          // 12: raftpb.PollTaskRequest
	(*PollTaskResponse)(nil),         // 13: raftpb.PollTaskResponse
	(*ReportTaskResultRequest)(nil),  // 14: raftpb.ReportTaskResultRequest
	(*ReportTaskResultResponse)(nil), // 15: raftpb.ReportTaskResultResponse
}
var file_raft_proto_depIdxs = []int32{
	0,  // 0: raftpb.Task.status:type_name -> raftpb.TaskStatus
	1,  // 1: raftpb.Node.status:type_name -> raftpb.NodeStatus
	2,  // 2: raftpb.GetTaskResponse.task:type_name -> raftpb.Task
	0,  // 3: raftpb.ListTasksRequest.status_filter:type_name -> raftpb.TaskStatus
	2,  // 4: raftpb.ListTasksResponse.tasks:type_name -> raftpb.Task
	2,  // 5: raftpb.PollTaskResponse.task:type_name -> raftpb.Task
	0,  // 6: raftpb.ReportTaskResultRequest.final_status:type_name -> raftpb.TaskStatus
	4,  // 7: raftpb.TaskService.SubmitTask:input_type -> raftpb.SubmitTaskRequest
	6,  // 8: raftpb.TaskService.GetTask:input_type -> raftpb.GetTaskRequest
	8,  // 9: raftpb.TaskService.ListTasks:input_type -> raftpb.ListTasksRequest
	10, // 10: raftpb.NodeService.Heartbeat:input_type -> raftpb.HeartbeatRequest
	12, // 11: raftpb.NodeService.PollTask:input_type -> raftpb.PollTaskRequest
	14, // 12: raftpb.NodeService.ReportTaskResult:input_type -> raftpb.ReportTaskResultRequest
	5,  // 13: raftpb.TaskService.SubmitTask:output_type -> raftpb.SubmitTaskResponse
	7,  // 14: raftpb.TaskService.GetTask:output_type -> raftpb.GetTaskResponse
	9,  // 15: raftpb.TaskService.ListTasks:output_type -> raftpb.ListTasksResponse
	11, // 16: raftpb.NodeService.Heartbeat:output_type -> raftpb.HeartbeatResponse
	13, // 17: raftpb.NodeService.PollTask:output_type -> raftpb.PollTaskResponse
	15, // 18: raftpb.NodeService.ReportTaskResult:output_type -> raftpb.ReportTaskResultResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_raft_proto_init() }
func file_raft_proto_init() {
	if File_raft_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_raft_proto_rawDesc), len(file_raft_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_raft_proto_goTypes,
		DependencyIndexes: file_raft_proto_depIdxs,
		EnumInfos:         file_raft_proto_enumTypes,
		MessageInfos:      file_raft_proto_msgTypes,
	}.Build()
	File_raft_proto = out.File
	file_raft_proto_goTypes = nil
	file_raft_proto_depIdxs = nil
}
